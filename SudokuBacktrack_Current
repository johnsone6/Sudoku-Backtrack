import java.util.HashSet;

//TODO data structure that holds all blanks in puzzle (including those that have already been filled in)
public class SudokuBacktrack {

	Cell[][] board;
	private int[][] blanks;
	Cell[][] finalSolution;
	private int width, length, boardSize, magicInt, numBlanks, initialTotal, upperLimit, puzzleSum;
	private long maximumTries;
	private boolean solutionFound;


	/**
	 * Constructor
	 * @param width the width of the inner boxes of the puzzle
	 * @param length the length of the inner boxes of the puzzle
	 * @param board the initial, unsolved board
	 */
	public SudokuBacktrack(int width, int length, Cell[][] board){
		this.width = width;
		this.length = length;
		this.board = board;
		this.boardSize = width * length;
		this.upperLimit = boardSize;
		this.solutionFound = false;

		magicInt = calcSumInt(boardSize);
		initialTotal = findInitialPuzzleSum();
		findBlanks();

		//	this.maximumTries = (int)Math.pow(boardSize, numBlanks);
		long temp = 1;
		for (int i = 0; i < numBlanks; i++){
			temp = temp * boardSize;
		}
		maximumTries = temp;
		
		
		//System.out.println(maximumTries + " possible combinations");
		//counter = new ArrayCounter(numBlanks, boardSize);
	}


	/**
	 * Gets the solution to the Sudoku board
	 * @return null if the board has not been found, or the completed board
	 */
	public Cell[][] getSolution(){
		if (solutionFound){
			
			return this.finalSolution;
		}
		else{
			return null;
		}
	}

	
	public boolean hasSolution(){
		return solutionFound;
	}

	
	public boolean findSolution(){
		System.out.print("Are there blanks?  ");
		
		if (findNextBlank() == null){	//if there are no blanks
			if (/*solutionFound || */!duplicatesCheck(board)){	//and if there are no duplicates
				System.out.println("No.\n" + "Are there duplicates?  " + "No.");
				createFinalSolution(board);
				solutionFound=true;
				return true;	//solution has been found
			}
			else{	//there are no blanks but duplicates exist ????
				System.out.println("No.\n" + "Are there duplicates?\n" + "Yes.");
				return solver();
			}
		}
		System.out.println("Yes.");
		System.out.println("Attempting to solve puzzle...");
		return solver();	//blanks exist
		
	}
	/**
	 * This method attempts to find the solution to the given Sudoku board
	 * @return true if the board has a solution, false if it does not
	 */
	public boolean solver(){
		Cell temp = findNextBlank();  
		if (temp == null){
			createFinalSolution(board);
			solutionFound = true;
			return true;
		}
			
		for(int num=1; num<=length*width; num++){
			//if duplicates is false, set space to blank and continue with for loop
			temp.value = num;
			if (duplicates(board, temp) == false){
				if (solver())	//recursive call to itself
					return true;
			}
			//else{
				//assign blank to space so that we can rerun for loop and try next digit
				//temp.value = 0;
			//}
		}
		temp.value = 0;
		return false;
	}



	/**
	 * Fills all the unknown spaces in the board with a starting value
	 */
	public void fillInSolution(){
		for (int i = 0; i < numBlanks; i++){
			board[blanks[i][0]][blanks[i][1]].value = 1;
		}
	}
	
	public void fillinBlank(int i){
		board[blanks[i][0]][blanks[i][1]].value = 1;
	}
	
	/**
	 * This method now computes the next number directly into the board
	 * and determines the sum of the puzzle at the same time
	 * 
	 */
	public void count() 
	{
		int count = numBlanks - 1;
		
		while(board[blanks[count][0]][blanks[count][1]].value == upperLimit)
		{
			board[blanks[count][0]][blanks[count][1]].value = 1;
			puzzleSum -= (upperLimit - 1);
			count--;
		}
		//testing
		System.out.println("Generated Assignment:");
		for (int w = 0; w < board.length; w++){
			for (int l = 0; l < board.length; l++){
				System.out.print(board[w][l] + " ");
			}
			System.out.println();
		}
			
		board[blanks[count][0]][blanks[count][1]].value++;
		puzzleSum++;
	}
	
	/**
	 * Determines whether the counter has reached the end 
	 * @return whether or not there is another number which can be generated
	 */
	public boolean hasNext(){
		for (int i = numBlanks - 1; i >= 0; i--){
			if (board[blanks[i][0]][blanks[i][1]].value != upperLimit){
				return true;
			}
		}
		return false;
	}
	


	/**
	 * This method finds the blanks and stores them in a 2D array
	 * blanks.length will get you the number of blanks in the main puzzle
	 * the coordinates of each blank are: 
	 * x = blanks[(counter variable)][0]
	 * y = blanks[(counter variable)][1]
	 */
	//TODO modify to find the next best blank
	private void findBlanks(){
		int blankCount = 0;

		//Finds the number of blank spaces in the puzzle
		for (int i = 0; i < boardSize; i++){
			for (int j = 0; j < boardSize; j++){
				if (board[i][j].value == 0){
					blankCount++;
				}
			}
		}

		numBlanks = blankCount;		
		//Uses the number of blank spaces to determine the correct size needed for the array
		blanks = new int[blankCount][2];
		blankCount = 0;
		
		//Adds the coordinates of each blank space to the array
		for (int i = 0; i < boardSize; i++){
			for (int j = 0; j < boardSize; j++){
				if (board[i][j].value == 0){
					blanks[blankCount][0] = i;
					blanks[blankCount][1] = j;
					blankCount++;
				}
			}
		}
	}


	/**
	 * Finds the number which all correct Sudoku of this size will add up to
	 * @param boardSize the board to be checked
	 * @return the number which all Sudoku matrices of these dimensions will add up to
	 */
	public int calcSumInt(int boardSize){
		int sumInt = 0;
		/*int bs = boardSize;
		int sumRowInt;
		sumRowInt = (((bs*bs) + bs)/2);
		sumInt = sumRowInt * bs;*/
		return sumInt;
	}

	
	/**
	 * Sums the actual values of puzzle, compares to the puzzles magic integer, then returns
	 * it's validity
	 * @param board the board to be checked
	 * @param magicInt the number that all correct matrices will add up to
	 * @return	whether or not the sum of this board matches the target sum
	 */
	public boolean checkPuzzleSum(int[][] board, int magicInt) {
		/*
		int sum = 0;
		int mi = magicInt;
		
		for (int i = 0; i < numBlanks; i++){
			sum += numbers[i];
		}
		//System.out.println("Sum of puzzle: " + sum);
		if((sum + initialTotal) == mi){
			return true;
		}
		else 
			return false;
			*/
		return true;
	}


	/**
	 * This method finds the total sum of all the numbers given in the initial board
	 * @return the sum of all given entries in the puzzle
	 */
	public int findInitialPuzzleSum() {
		int sum = 0;

		/*for(int i = 0; i < board.length; i++){
			for(int j = 0; j < board[i].length; j++){
				sum = sum + board[i][j].value;
			}
		}*/
		
		return sum;
	}
	
	
	/**
	 * Copies the final board into a separate 2D array so we don't lose it
	 * @param board the board to be copied
	 */
	private void createFinalSolution(Cell[][] board){
		finalSolution = new Cell[boardSize][boardSize];
		
		for (int i = 0; i < boardSize; i++){
			for (int j = 0; j < boardSize; j++){
				finalSolution[i][j] = new Cell();
				finalSolution[i][j].value = board[i][j].value;
			}
		}
	}
	
	public boolean duplicatesCheck(Cell[][] board){
		return (checkColumns(board) || checkRows(board) || checkBoxes(board));
	}
	/**
	 * checks duplicates
	 * calls methods to run all three checks (columns, rows, boxes)
	 * @param board the board to be checked
	 * @return true if the board does not contain duplicates, false if the board contains duplicates
	 */
	public boolean duplicates(Cell[][] board, Cell temp){
		return (checkColumn(board,temp) || checkRow(board,temp) || checkBox(board,temp));
	}
	
	public boolean checkBox(Cell[][] board, Cell temp){
		boolean[] nums = new boolean[boardSize +1];
		int startRow = 0;
		int startCol = 0;
		//Get current box we want to look at
		//getting beginning of box row
		startRow = (temp.row/length)*length;
		//getting beginning of box column
		startCol = (temp.col/width)*width;
		
		for (int rows=startRow; rows<length +startRow; rows++){
			for (int cols=startCol; cols<width + startCol; cols++){
				if (nums[board[rows][cols].value] && board[rows][cols].value != 0){
					return true;
				}
				else{
					nums[board[rows][cols].value] = true;
				}
			}
		}
		return false;
	}
	
	public boolean checkRow(Cell[][] board, Cell temp){
		boolean[] nums = new boolean[boardSize +1];
		
		for(int i=0; i<board.length; i++){
			if (nums[board[temp.row][i].value] && board[temp.row][i].value != 0){
				return true;
			}
			else{
				nums[board[temp.row][i].value] = true;
			}
		}
		return false;
	}
	/**
 	 * checks current column for duplicate numbers
	 * @param board the board to be checked
	 * @param the cell whos column needs to be checked
	 * @return true if the current column contains duplicate numbers, false if the current column do not contains no duplicates
	 */
	public boolean checkColumn(Cell[][] board, Cell temp){
		boolean[] nums = new boolean[boardSize +1];
		
		for(int i=0; i<board.length; i++){
			
			if (nums[board[i][temp.col].value] && board[i][temp.col].value != 0){
				return true;
			}
			else{
				nums[board[i][temp.col].value] = true;
			}
		}
		return false;
	}
	/**
 	 * checks each column for duplicate numbers
	 * @param board the board to be checked
	 * @return true if the columns of the board contain duplicated numbers, false if the columns do not contain duplicated numbers
	 */
	public boolean checkColumns(Cell[][] board){
		boolean[] numbers;
		
		for (int i = 0; i < board.length; i++) {
			numbers = new boolean[boardSize + 1];
			for (int j=0; j < board.length; j++) {
				if (numbers[board[j][i].value] && board[j][i].value != 0){
					return true;
				}
				else{
					numbers[board[j][i].value] = true;
				}	
			}
		}
		return false;
	}

	/**
	 * checks each row for duplicate numbers
	 * @param board2 the board to be checked
	 * @return true if the rows of the board contain duplicated numbers, false if the rows do not contain duplicated numbers
	 */
	public boolean checkRows(Cell[][] board2){
		boolean[] numbers;
		for (int i = 0; i < board2.length; i++) {
			numbers = new boolean[boardSize + 1];
			for (int j=0; j < board2.length; j++) {
				if (numbers[board2[i][j].value] && board[i][j].value != 0){
					//System.out.println("row duplicates found: " + board[i][j]);
	            	//System.out.println(i + " by " + j);
					return true;
				}
				else{
					numbers[board2[i][j].value] = true;
				}	
			}
		}
		return false;
	}

	/**
	 * Checks the inner boxes for duplicate items
	 * @param board2 the board to be checked
	 * @return false if the board contains no duplicate items, true if the board contains duplicates
	 */
	public boolean checkBoxes(Cell[][] board2){
		boolean[] numbers; 

		//outer loops controls which box we are currently looking at
		for (int boxX = 0; boxX < boardSize; boxX += length){
			for (int boxY = 0; boxY < boardSize; boxY += width){
				//This is initialized to the default of all false
				numbers = new boolean[boardSize + 1];

				//Inner loops check each box for duplicate numbers
				for (int x = boxX; x < length + boxX; x++){
					for (int y = boxY; y < width + boxY; y++){
						if (numbers[board2[x][y].value] && board[x][y].value != 0){
							return true;
						}
						else{
							numbers[board2[x][y].value] = true;
						}
					}
				}
			}
		}
		return false;
	}
	
	/* CELL CLASS */
	//Gave cell package access so the driver can use it- np
/*	class Cell {
		public int value;
		
		public Cell(){
			value =0;
		}
	}*/
	
	/**
	 * Finds the next available blank in the puzzle
	 * @return cell location of next blank cell or null if no other blanks
	 */
	public Cell findNextBlank(){
		
		for (int i = 0; i < boardSize; i++){
			for (int j = 0; j < boardSize; j++){
				if (board[i][j].value == 0){
					return board[i][j];
				}
			}
		
	}
		return null;
	}
	
	
}
