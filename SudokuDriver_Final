import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.InputMismatchException;
import java.util.Scanner;

/**
 * Class: DAA-Afternoon section
 * Project 2: Sudoku Backtracking
 * Project members: Chris Houze, Nick Perkins, Erica Johnson
 *
 */

public class SudokuDriver {
	
	public static void main(String[] args) {
		//Variable declarations
		Cell[][] board;
		int  width, length, boardSize;
		Scanner fileScanner;
		String input;
		SudokuBacktrack solver;
		
			try {
				fileScanner = new Scanner(new FileReader(args[0]));
				//Skips past the commented lines at the beginning of the file
				while(true){
					input = fileScanner.nextLine();
					if (!(input.startsWith("c") || input.startsWith("C"))){
						break;
					}
				}
				
				//Reads the dimensions of the board
				width = Integer.parseInt(input);
				length = fileScanner.nextInt();
				
				boardSize = length * width;
				board = new Cell[boardSize][boardSize];

				//Initializes the board
				for (int w = 0; w < boardSize; w++){

					for (int l = 0; l < boardSize; l++){
						board[w][l] = new Cell();
						board[w][l].value = fileScanner.nextInt();
						board[w][l].row = w;
						board[w][l].col = l;
					}
				}
				
				//Printing out inputed board
				System.out.println("Input puzzle:");
				printBoard(board);
				
				//Creating the solver object
				solver = new SudokuBacktrack(width, length, board);
				if(solver.findSolution()){
					board = solver.getSolution();
					System.out.println("Solution found.\n" + "Solved Puzzle:");
					printBoard(board);
				}
				else{
					System.out.println("No solution found.");
				}
			}
			catch (FileNotFoundException e1){
				System.out.println("Could not locate file.");
			}
			catch (InputMismatchException | NumberFormatException e2){
				System.out.println("There was an error processing the file," +
						"\nplease make sure you specified the correct file, or try another file.");
			}
		}
	
	/**
	 * Prints current state of the puzzle board
	 * @param board of Cell[][] objects
	 */
	private static void printBoard(Cell[][] board){
		for (int w = 0; w < board.length; w++){
			
			for (int l = 0; l < board.length; l++){
				System.out.print(board[w][l].value + " ");
			}
			System.out.println();
		}
	}
}
