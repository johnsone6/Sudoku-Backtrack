import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.InputMismatchException;
import java.util.Scanner;

/**
 * Project members: Chris Houze, Nick Perkins, Erica Johnson
 *
 */

public class SudokuDriver {
	private static int MAX_TRIES = 3;
	
	public static void main(String[] args) {
		//Variable declarations
		Cell[][] board;
		int  width, length, boardSize;
		//Scanner console = new Scanner(System.in);
		Scanner fileScanner;
		String input;
		SudokuBacktrack solver;
		
		
		
		//Main loop for user input
		//for (int i = 0; i < MAX_TRIES; i++){
			try {
				//System.out.print("Enter the name of the file to be processed: ");
				
				fileScanner = new Scanner(new FileReader(args[0]));
				//Skips past the commented lines at the beginning of the file
				while(true){
					input = fileScanner.nextLine();
					if (!(input.startsWith("c") || input.startsWith("C"))){
						break;
					}
				}
				
				
				//Reads the dimensions of the board
				width = Integer.parseInt(input);
				length = fileScanner.nextInt();
				
				boardSize = length * width;
				board = new Cell[boardSize][boardSize];

				
				//Initializes the board
				for (int w = 0; w < boardSize; w++){

					for (int l = 0; l < boardSize; l++){
						board[w][l] = new Cell();
						board[w][l].value = fileScanner.nextInt();

						
					}
					
				}
				
				//Prints out the board, mainly for testing purposes, these loops may be commented out
				printBoard(board);
				
				//Creates the solver object
				solver = new SudokuBacktrack(width, length, board);
				if(solver.findSolution()){
					board = solver.getSolution();
				
					printBoard(board);
				}
				
				
				
				//console.close();
				//break;
				
				
			}
			catch (FileNotFoundException e1){
				System.out.println("Could not locate file");
			}
			catch (InputMismatchException | NumberFormatException e2){
				System.out.println("There was an error processing the file," +
						"\nplease make sure you specified the correct file, or try another file.");
				
			}
		}
	//}
	
	
	
	
	private static void printBoard(Cell[][] board){
		for (int w = 0; w < board.length; w++){
			for (int l = 0; l < board.length; l++){
				System.out.print(board[w][l].value + " ");
			}
			System.out.println();
		}
	}
	
	
}
